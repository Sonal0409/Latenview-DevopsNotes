
1. Check version of git on Lab
. git --version

2.Create a working directory and file inside it
...
sudo su -
...
mkdir myproject
...
cd myproject
...
touch index1.html index2.html

3. Create a local repository
...
git init
...

ls -al == .git folder will be seen, which is local repo

4. Configure git and set up the values for 2 variables : user.name & user.email

...
git config --global user.name sonal0409
...

git config --global user.email admin@gmail.com

git config --list


5. Check the status of working directory
...
git status
...


6. Add the files to stagging area

  git add <filename>
  
  git add index1.html

  git status

7. Commit the stagged files to Local Repo

  git commit -m "added file index1.html"

8. Check files in Local repo

 git lis-files

9. Check you commit hisotry

 git log

 git log --oneline

copy the commit id

 git show <commitid>

10. Take an exisitng file tracked by GIT and make some changes into it. Commit these changes to git

Method 1:
...

  git commit -a -m "modified files"

...

Method2:

 git add index1.html
 
 git commit -m "added modification"

11. Commit a single file to local repo

 git commit -m "any message" file1

12 show difference between chnages commited on the file and chnages newley done

  take file index1.html ==> make some chnages and save the file

 git status

 git diff index1.html

Discard the chnages form working directory on the file index1.html

 git restore index1.html


 Again take file index1.html ==> make some chnages and save the file

 git status

 git add .

git status ==> changes are staged

 how difference between chnages commited on the file and chnages That are staged


  git diff --staged index1.html


bring back the changes to Working directory


 git restore --staged index1.html

  git status ==> modification will be unstaged

********************************

Delete a file from local repo and working directory


 git rm index1.html

We will have to also commit the deleted changes

git commit -m "deletion"

git log --oneline --grep delete

************************************

Revert a commit :

This is a scenario in which you will slect a commit id

while applying revert command on the commit id, 

what ever chnages happened as part of the commit will be back to its previous state

Also whenever revert is done, a new commit id is generetd for revert action


*******************************************
Branching is a concept in git which allows to you freely work on multiple features at he same time without impacting the main master branch

Whenever we do commits on our repository we have seen a branch named master which gets updated.

Master branch is the default branch which get created upon initializing a repo

You can create any number of branched, a branch is copy of master branch

You can switch to a branch and work/develop on it. Once development or changes are complete on a branch , you can merge it to master branch

You can also rename and delete a branch.

But you cannot delete the master branch.

Scenario 1: Create branches in Local repo

Command to check how many branches are in Local repo

… git branch … Create a new branch in our Local repository … git branch f1 …

Switch to a particular branch … git checkout f1 …

Add new file and commit on the branch f1 $ touch feature1 $ git add . $ git commit -m “added onf1”

$ git log –oneline // check the new commit Switch back to master branch and compare the 2 branches

… git checkout master … Assignment

Compare the 2 branches: …

git diff --name-status master..f1

… OR

git diff master..f1

Scenario 2:

Command to create a new branch as well as switch to new branch … git checkout -b f2 …

Add new file and commit on the new branch

Switch back to master

Scenario 3: Merge the changes from feature branch to master

Always switch to the branch where you want to merge the files from feature branch … git checkout master …

Merge the changes from new branch to master branch … git merge …

… git merge f1 master … Check the commit history on master

Scenario 4:

Change the name of the branch … git branch -M f1 dev …

Delete a branch in local:

Make sure , you are not on the branch that is to be deleted

First checkout to master branch … git checkout master …

… git branch -D f2 …

List of branches that have not been merged to master

git branch --no-merged

List of branches that have been merged to master

git branch --merged

Cherry-pick scenario:

... git branch ... git checkout f2 ... ls ... touch login ... git add . ... git commit -m "f2 login" ... touch sonal ... git add .

... git commit -m "f2 sonal" ...

git log --oneline ... git checkout master ... git cherry-pick 66922bf f86a4c9 ... ls

**************************************

Day 2: GIT & GITHUB Notes:
*******************************

on the terminal go to your local repo

sudo su -

...
cd myrpoject
...

...
git log --oneline
...

1. Create a personal Access token on GITHUB

the purpose of personal Access token is to authenticate that user who is pushing files form local is valid




How to create a Remote repository on GITHUB

https://github.com/Sonal0409/myproject06dec.git


you can  connect to a repo via 

https  -->during the push of file form local repo to remote repo you have to give user name and token

ssh -->  during the push of file form local to remote you will ahve to give SSH key (password less authentication)




3. Connect the local repo to Remote repo
...
git remote add origin https://github.com/Sonal0409/myproject06dec.git
...

origin here is an alias name to your remote repo path

4. How can we check if local is connected to remote

...
git remote -v
...

origin	https://github.com/Sonal0409/myproject06dec.git (push)

5. Push you files and commits from branch master into remote repo


...

git push origin master

...

username: github username
password: copy the token


6. On the Remote repo , create a file and commit them



7. Pull the new file and commit from remote repo to Local repo

...

git pull origin master

...


8. Clone the remote repo into Local machine


 git clone https://github.com/santhiyas0907/myproject061211.git

Clone command will:

it will create folder with same name as remote repo name -> myproject061211

you can go inside the folder, you will see all the files and commits

cd myproject061211

ls -al

git log --oneline

git remote -v

Now you can create some file file and contribute to the remote repo


9. Forking

> Copy anothers remote repo into you github account


****************************************

Continous Integration:

Go to browser

localhost:8080

logged into jenkins : admin/admin




































































































